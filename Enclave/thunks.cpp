// autogenerated by gen_thunks.py

#include "wa.h"

extern Module *_wa_current_module_;

void thunk_out_0_0(Module *m, Block *function, Type *type) {
  ((void (*)())function->func_ptr)();
  m->sp = m->sp + 0;
}

void thunk_out_0_i(Module *m, Block *function, Type *type) {
  ((void (*)(uint32_t))function->func_ptr)(m->stack[m->sp-0].value.uint32);
  m->sp = m->sp + -1;
}

void thunk_out_0_ii(Module *m, Block *function, Type *type) {
  ((void (*)(uint32_t, uint32_t))function->func_ptr)(m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint32);
  m->sp = m->sp + -2;
}

void thunk_out_0_iii(Module *m, Block *function, Type *type) {
  ((void (*)(uint32_t, uint32_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint32);
  m->sp = m->sp + -3;
}

void thunk_out_0_iiI(Module *m, Block *function, Type *type) {
  ((void (*)(uint32_t, uint32_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint64);
  m->sp = m->sp + -3;
}

void thunk_out_0_iif(Module *m, Block *function, Type *type) {
  ((void (*)(uint32_t, uint32_t, float))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f32);
  m->sp = m->sp + -3;
}

void thunk_out_0_iiF(Module *m, Block *function, Type *type) {
  ((void (*)(uint32_t, uint32_t, double))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f64);
  m->sp = m->sp + -3;
}

void thunk_out_0_iI(Module *m, Block *function, Type *type) {
  ((void (*)(uint32_t, uint64_t))function->func_ptr)(m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint64);
  m->sp = m->sp + -2;
}

void thunk_out_0_iIi(Module *m, Block *function, Type *type) {
  ((void (*)(uint32_t, uint64_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint32);
  m->sp = m->sp + -3;
}

void thunk_out_0_iII(Module *m, Block *function, Type *type) {
  ((void (*)(uint32_t, uint64_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint64);
  m->sp = m->sp + -3;
}

void thunk_out_0_iIf(Module *m, Block *function, Type *type) {
  ((void (*)(uint32_t, uint64_t, float))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f32);
  m->sp = m->sp + -3;
}

void thunk_out_0_iIF(Module *m, Block *function, Type *type) {
  ((void (*)(uint32_t, uint64_t, double))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f64);
  m->sp = m->sp + -3;
}

void thunk_out_0_if(Module *m, Block *function, Type *type) {
  ((void (*)(uint32_t, float))function->func_ptr)(m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f32);
  m->sp = m->sp + -2;
}

void thunk_out_0_ifi(Module *m, Block *function, Type *type) {
  ((void (*)(uint32_t, float, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint32);
  m->sp = m->sp + -3;
}

void thunk_out_0_ifI(Module *m, Block *function, Type *type) {
  ((void (*)(uint32_t, float, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint64);
  m->sp = m->sp + -3;
}

void thunk_out_0_iff(Module *m, Block *function, Type *type) {
  ((void (*)(uint32_t, float, float))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f32);
  m->sp = m->sp + -3;
}

void thunk_out_0_ifF(Module *m, Block *function, Type *type) {
  ((void (*)(uint32_t, float, double))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f64);
  m->sp = m->sp + -3;
}

void thunk_out_0_iF(Module *m, Block *function, Type *type) {
  ((void (*)(uint32_t, double))function->func_ptr)(m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f64);
  m->sp = m->sp + -2;
}

void thunk_out_0_iFi(Module *m, Block *function, Type *type) {
  ((void (*)(uint32_t, double, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint32);
  m->sp = m->sp + -3;
}

void thunk_out_0_iFI(Module *m, Block *function, Type *type) {
  ((void (*)(uint32_t, double, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint64);
  m->sp = m->sp + -3;
}

void thunk_out_0_iFf(Module *m, Block *function, Type *type) {
  ((void (*)(uint32_t, double, float))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f32);
  m->sp = m->sp + -3;
}

void thunk_out_0_iFF(Module *m, Block *function, Type *type) {
  ((void (*)(uint32_t, double, double))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f64);
  m->sp = m->sp + -3;
}

void thunk_out_0_I(Module *m, Block *function, Type *type) {
  ((void (*)(uint64_t))function->func_ptr)(m->stack[m->sp-0].value.uint64);
  m->sp = m->sp + -1;
}

void thunk_out_0_Ii(Module *m, Block *function, Type *type) {
  ((void (*)(uint64_t, uint32_t))function->func_ptr)(m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint32);
  m->sp = m->sp + -2;
}

void thunk_out_0_Iii(Module *m, Block *function, Type *type) {
  ((void (*)(uint64_t, uint32_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint32);
  m->sp = m->sp + -3;
}

void thunk_out_0_IiI(Module *m, Block *function, Type *type) {
  ((void (*)(uint64_t, uint32_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint64);
  m->sp = m->sp + -3;
}

void thunk_out_0_Iif(Module *m, Block *function, Type *type) {
  ((void (*)(uint64_t, uint32_t, float))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f32);
  m->sp = m->sp + -3;
}

void thunk_out_0_IiF(Module *m, Block *function, Type *type) {
  ((void (*)(uint64_t, uint32_t, double))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f64);
  m->sp = m->sp + -3;
}

void thunk_out_0_II(Module *m, Block *function, Type *type) {
  ((void (*)(uint64_t, uint64_t))function->func_ptr)(m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint64);
  m->sp = m->sp + -2;
}

void thunk_out_0_IIi(Module *m, Block *function, Type *type) {
  ((void (*)(uint64_t, uint64_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint32);
  m->sp = m->sp + -3;
}

void thunk_out_0_III(Module *m, Block *function, Type *type) {
  ((void (*)(uint64_t, uint64_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint64);
  m->sp = m->sp + -3;
}

void thunk_out_0_IIf(Module *m, Block *function, Type *type) {
  ((void (*)(uint64_t, uint64_t, float))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f32);
  m->sp = m->sp + -3;
}

void thunk_out_0_IIF(Module *m, Block *function, Type *type) {
  ((void (*)(uint64_t, uint64_t, double))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f64);
  m->sp = m->sp + -3;
}

void thunk_out_0_If(Module *m, Block *function, Type *type) {
  ((void (*)(uint64_t, float))function->func_ptr)(m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f32);
  m->sp = m->sp + -2;
}

void thunk_out_0_Ifi(Module *m, Block *function, Type *type) {
  ((void (*)(uint64_t, float, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint32);
  m->sp = m->sp + -3;
}

void thunk_out_0_IfI(Module *m, Block *function, Type *type) {
  ((void (*)(uint64_t, float, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint64);
  m->sp = m->sp + -3;
}

void thunk_out_0_Iff(Module *m, Block *function, Type *type) {
  ((void (*)(uint64_t, float, float))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f32);
  m->sp = m->sp + -3;
}

void thunk_out_0_IfF(Module *m, Block *function, Type *type) {
  ((void (*)(uint64_t, float, double))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f64);
  m->sp = m->sp + -3;
}

void thunk_out_0_IF(Module *m, Block *function, Type *type) {
  ((void (*)(uint64_t, double))function->func_ptr)(m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f64);
  m->sp = m->sp + -2;
}

void thunk_out_0_IFi(Module *m, Block *function, Type *type) {
  ((void (*)(uint64_t, double, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint32);
  m->sp = m->sp + -3;
}

void thunk_out_0_IFI(Module *m, Block *function, Type *type) {
  ((void (*)(uint64_t, double, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint64);
  m->sp = m->sp + -3;
}

void thunk_out_0_IFf(Module *m, Block *function, Type *type) {
  ((void (*)(uint64_t, double, float))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f32);
  m->sp = m->sp + -3;
}

void thunk_out_0_IFF(Module *m, Block *function, Type *type) {
  ((void (*)(uint64_t, double, double))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f64);
  m->sp = m->sp + -3;
}

void thunk_out_0_f(Module *m, Block *function, Type *type) {
  ((void (*)(float))function->func_ptr)(m->stack[m->sp-0].value.f32);
  m->sp = m->sp + -1;
}

void thunk_out_0_fi(Module *m, Block *function, Type *type) {
  ((void (*)(float, uint32_t))function->func_ptr)(m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint32);
  m->sp = m->sp + -2;
}

void thunk_out_0_fii(Module *m, Block *function, Type *type) {
  ((void (*)(float, uint32_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint32);
  m->sp = m->sp + -3;
}

void thunk_out_0_fiI(Module *m, Block *function, Type *type) {
  ((void (*)(float, uint32_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint64);
  m->sp = m->sp + -3;
}

void thunk_out_0_fif(Module *m, Block *function, Type *type) {
  ((void (*)(float, uint32_t, float))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f32);
  m->sp = m->sp + -3;
}

void thunk_out_0_fiF(Module *m, Block *function, Type *type) {
  ((void (*)(float, uint32_t, double))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f64);
  m->sp = m->sp + -3;
}

void thunk_out_0_fI(Module *m, Block *function, Type *type) {
  ((void (*)(float, uint64_t))function->func_ptr)(m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint64);
  m->sp = m->sp + -2;
}

void thunk_out_0_fIi(Module *m, Block *function, Type *type) {
  ((void (*)(float, uint64_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint32);
  m->sp = m->sp + -3;
}

void thunk_out_0_fII(Module *m, Block *function, Type *type) {
  ((void (*)(float, uint64_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint64);
  m->sp = m->sp + -3;
}

void thunk_out_0_fIf(Module *m, Block *function, Type *type) {
  ((void (*)(float, uint64_t, float))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f32);
  m->sp = m->sp + -3;
}

void thunk_out_0_fIF(Module *m, Block *function, Type *type) {
  ((void (*)(float, uint64_t, double))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f64);
  m->sp = m->sp + -3;
}

void thunk_out_0_ff(Module *m, Block *function, Type *type) {
  ((void (*)(float, float))function->func_ptr)(m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f32);
  m->sp = m->sp + -2;
}

void thunk_out_0_ffi(Module *m, Block *function, Type *type) {
  ((void (*)(float, float, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint32);
  m->sp = m->sp + -3;
}

void thunk_out_0_ffI(Module *m, Block *function, Type *type) {
  ((void (*)(float, float, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint64);
  m->sp = m->sp + -3;
}

void thunk_out_0_fff(Module *m, Block *function, Type *type) {
  ((void (*)(float, float, float))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f32);
  m->sp = m->sp + -3;
}

void thunk_out_0_ffF(Module *m, Block *function, Type *type) {
  ((void (*)(float, float, double))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f64);
  m->sp = m->sp + -3;
}

void thunk_out_0_fF(Module *m, Block *function, Type *type) {
  ((void (*)(float, double))function->func_ptr)(m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f64);
  m->sp = m->sp + -2;
}

void thunk_out_0_fFi(Module *m, Block *function, Type *type) {
  ((void (*)(float, double, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint32);
  m->sp = m->sp + -3;
}

void thunk_out_0_fFI(Module *m, Block *function, Type *type) {
  ((void (*)(float, double, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint64);
  m->sp = m->sp + -3;
}

void thunk_out_0_fFf(Module *m, Block *function, Type *type) {
  ((void (*)(float, double, float))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f32);
  m->sp = m->sp + -3;
}

void thunk_out_0_fFF(Module *m, Block *function, Type *type) {
  ((void (*)(float, double, double))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f64);
  m->sp = m->sp + -3;
}

void thunk_out_0_F(Module *m, Block *function, Type *type) {
  ((void (*)(double))function->func_ptr)(m->stack[m->sp-0].value.f64);
  m->sp = m->sp + -1;
}

void thunk_out_0_Fi(Module *m, Block *function, Type *type) {
  ((void (*)(double, uint32_t))function->func_ptr)(m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint32);
  m->sp = m->sp + -2;
}

void thunk_out_0_Fii(Module *m, Block *function, Type *type) {
  ((void (*)(double, uint32_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint32);
  m->sp = m->sp + -3;
}

void thunk_out_0_FiI(Module *m, Block *function, Type *type) {
  ((void (*)(double, uint32_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint64);
  m->sp = m->sp + -3;
}

void thunk_out_0_Fif(Module *m, Block *function, Type *type) {
  ((void (*)(double, uint32_t, float))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f32);
  m->sp = m->sp + -3;
}

void thunk_out_0_FiF(Module *m, Block *function, Type *type) {
  ((void (*)(double, uint32_t, double))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f64);
  m->sp = m->sp + -3;
}

void thunk_out_0_FI(Module *m, Block *function, Type *type) {
  ((void (*)(double, uint64_t))function->func_ptr)(m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint64);
  m->sp = m->sp + -2;
}

void thunk_out_0_FIi(Module *m, Block *function, Type *type) {
  ((void (*)(double, uint64_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint32);
  m->sp = m->sp + -3;
}

void thunk_out_0_FII(Module *m, Block *function, Type *type) {
  ((void (*)(double, uint64_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint64);
  m->sp = m->sp + -3;
}

void thunk_out_0_FIf(Module *m, Block *function, Type *type) {
  ((void (*)(double, uint64_t, float))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f32);
  m->sp = m->sp + -3;
}

void thunk_out_0_FIF(Module *m, Block *function, Type *type) {
  ((void (*)(double, uint64_t, double))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f64);
  m->sp = m->sp + -3;
}

void thunk_out_0_Ff(Module *m, Block *function, Type *type) {
  ((void (*)(double, float))function->func_ptr)(m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f32);
  m->sp = m->sp + -2;
}

void thunk_out_0_Ffi(Module *m, Block *function, Type *type) {
  ((void (*)(double, float, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint32);
  m->sp = m->sp + -3;
}

void thunk_out_0_FfI(Module *m, Block *function, Type *type) {
  ((void (*)(double, float, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint64);
  m->sp = m->sp + -3;
}

void thunk_out_0_Fff(Module *m, Block *function, Type *type) {
  ((void (*)(double, float, float))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f32);
  m->sp = m->sp + -3;
}

void thunk_out_0_FfF(Module *m, Block *function, Type *type) {
  ((void (*)(double, float, double))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f64);
  m->sp = m->sp + -3;
}

void thunk_out_0_FF(Module *m, Block *function, Type *type) {
  ((void (*)(double, double))function->func_ptr)(m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f64);
  m->sp = m->sp + -2;
}

void thunk_out_0_FFi(Module *m, Block *function, Type *type) {
  ((void (*)(double, double, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint32);
  m->sp = m->sp + -3;
}

void thunk_out_0_FFI(Module *m, Block *function, Type *type) {
  ((void (*)(double, double, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint64);
  m->sp = m->sp + -3;
}

void thunk_out_0_FFf(Module *m, Block *function, Type *type) {
  ((void (*)(double, double, float))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f32);
  m->sp = m->sp + -3;
}

void thunk_out_0_FFF(Module *m, Block *function, Type *type) {
  ((void (*)(double, double, double))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f64);
  m->sp = m->sp + -3;
}

void thunk_out_i_0(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)())function->func_ptr)();
  m->sp += 1;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_i(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint32_t))function->func_ptr)(m->stack[m->sp-0].value.uint32);
  m->sp += 0;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_ii(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint32_t, uint32_t))function->func_ptr)(m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint32);
  m->sp += -1;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_iii(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint32_t, uint32_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_iiI(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint32_t, uint32_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_iif(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint32_t, uint32_t, float))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_iiF(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint32_t, uint32_t, double))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_iI(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint32_t, uint64_t))function->func_ptr)(m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint64);
  m->sp += -1;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_iIi(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint32_t, uint64_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_iII(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint32_t, uint64_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_iIf(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint32_t, uint64_t, float))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_iIF(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint32_t, uint64_t, double))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_if(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint32_t, float))function->func_ptr)(m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f32);
  m->sp += -1;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_ifi(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint32_t, float, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_ifI(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint32_t, float, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_iff(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint32_t, float, float))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_ifF(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint32_t, float, double))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_iF(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint32_t, double))function->func_ptr)(m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f64);
  m->sp += -1;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_iFi(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint32_t, double, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_iFI(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint32_t, double, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_iFf(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint32_t, double, float))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_iFF(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint32_t, double, double))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_I(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint64_t))function->func_ptr)(m->stack[m->sp-0].value.uint64);
  m->sp += 0;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_Ii(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint64_t, uint32_t))function->func_ptr)(m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint32);
  m->sp += -1;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_Iii(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint64_t, uint32_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_IiI(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint64_t, uint32_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_Iif(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint64_t, uint32_t, float))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_IiF(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint64_t, uint32_t, double))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_II(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint64_t, uint64_t))function->func_ptr)(m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint64);
  m->sp += -1;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_IIi(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint64_t, uint64_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_III(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint64_t, uint64_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_IIf(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint64_t, uint64_t, float))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_IIF(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint64_t, uint64_t, double))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_If(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint64_t, float))function->func_ptr)(m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f32);
  m->sp += -1;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_Ifi(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint64_t, float, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_IfI(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint64_t, float, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_Iff(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint64_t, float, float))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_IfF(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint64_t, float, double))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_IF(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint64_t, double))function->func_ptr)(m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f64);
  m->sp += -1;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_IFi(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint64_t, double, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_IFI(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint64_t, double, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_IFf(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint64_t, double, float))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_IFF(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint64_t, double, double))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_f(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(float))function->func_ptr)(m->stack[m->sp-0].value.f32);
  m->sp += 0;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_fi(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(float, uint32_t))function->func_ptr)(m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint32);
  m->sp += -1;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_fii(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(float, uint32_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_fiI(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(float, uint32_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_fif(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(float, uint32_t, float))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_fiF(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(float, uint32_t, double))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_fI(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(float, uint64_t))function->func_ptr)(m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint64);
  m->sp += -1;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_fIi(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(float, uint64_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_fII(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(float, uint64_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_fIf(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(float, uint64_t, float))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_fIF(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(float, uint64_t, double))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_ff(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(float, float))function->func_ptr)(m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f32);
  m->sp += -1;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_ffi(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(float, float, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_ffI(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(float, float, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_fff(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(float, float, float))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_ffF(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(float, float, double))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_fF(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(float, double))function->func_ptr)(m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f64);
  m->sp += -1;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_fFi(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(float, double, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_fFI(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(float, double, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_fFf(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(float, double, float))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_fFF(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(float, double, double))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_F(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(double))function->func_ptr)(m->stack[m->sp-0].value.f64);
  m->sp += 0;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_Fi(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(double, uint32_t))function->func_ptr)(m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint32);
  m->sp += -1;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_Fii(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(double, uint32_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_FiI(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(double, uint32_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_Fif(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(double, uint32_t, float))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_FiF(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(double, uint32_t, double))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_FI(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(double, uint64_t))function->func_ptr)(m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint64);
  m->sp += -1;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_FIi(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(double, uint64_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_FII(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(double, uint64_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_FIf(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(double, uint64_t, float))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_FIF(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(double, uint64_t, double))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_Ff(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(double, float))function->func_ptr)(m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f32);
  m->sp += -1;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_Ffi(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(double, float, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_FfI(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(double, float, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_Fff(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(double, float, float))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_FfF(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(double, float, double))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_FF(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(double, double))function->func_ptr)(m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f64);
  m->sp += -1;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_FFi(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(double, double, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_FFI(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(double, double, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_FFf(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(double, double, float))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_FFF(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(double, double, double))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_I_0(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)())function->func_ptr)();
  m->sp += 1;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_i(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint32_t))function->func_ptr)(m->stack[m->sp-0].value.uint32);
  m->sp += 0;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_ii(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint32_t, uint32_t))function->func_ptr)(m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint32);
  m->sp += -1;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_iii(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint32_t, uint32_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_iiI(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint32_t, uint32_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_iif(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint32_t, uint32_t, float))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_iiF(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint32_t, uint32_t, double))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_iI(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint32_t, uint64_t))function->func_ptr)(m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint64);
  m->sp += -1;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_iIi(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint32_t, uint64_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_iII(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint32_t, uint64_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_iIf(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint32_t, uint64_t, float))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_iIF(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint32_t, uint64_t, double))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_if(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint32_t, float))function->func_ptr)(m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f32);
  m->sp += -1;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_ifi(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint32_t, float, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_ifI(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint32_t, float, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_iff(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint32_t, float, float))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_ifF(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint32_t, float, double))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_iF(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint32_t, double))function->func_ptr)(m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f64);
  m->sp += -1;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_iFi(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint32_t, double, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_iFI(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint32_t, double, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_iFf(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint32_t, double, float))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_iFF(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint32_t, double, double))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_I(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint64_t))function->func_ptr)(m->stack[m->sp-0].value.uint64);
  m->sp += 0;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_Ii(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint64_t, uint32_t))function->func_ptr)(m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint32);
  m->sp += -1;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_Iii(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint64_t, uint32_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_IiI(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint64_t, uint32_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_Iif(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint64_t, uint32_t, float))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_IiF(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint64_t, uint32_t, double))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_II(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint64_t, uint64_t))function->func_ptr)(m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint64);
  m->sp += -1;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_IIi(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint64_t, uint64_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_III(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_IIf(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint64_t, uint64_t, float))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_IIF(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint64_t, uint64_t, double))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_If(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint64_t, float))function->func_ptr)(m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f32);
  m->sp += -1;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_Ifi(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint64_t, float, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_IfI(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint64_t, float, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_Iff(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint64_t, float, float))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_IfF(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint64_t, float, double))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_IF(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint64_t, double))function->func_ptr)(m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f64);
  m->sp += -1;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_IFi(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint64_t, double, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_IFI(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint64_t, double, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_IFf(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint64_t, double, float))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_IFF(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(uint64_t, double, double))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_f(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(float))function->func_ptr)(m->stack[m->sp-0].value.f32);
  m->sp += 0;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_fi(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(float, uint32_t))function->func_ptr)(m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint32);
  m->sp += -1;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_fii(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(float, uint32_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_fiI(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(float, uint32_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_fif(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(float, uint32_t, float))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_fiF(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(float, uint32_t, double))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_fI(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(float, uint64_t))function->func_ptr)(m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint64);
  m->sp += -1;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_fIi(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(float, uint64_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_fII(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(float, uint64_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_fIf(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(float, uint64_t, float))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_fIF(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(float, uint64_t, double))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_ff(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(float, float))function->func_ptr)(m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f32);
  m->sp += -1;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_ffi(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(float, float, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_ffI(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(float, float, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_fff(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(float, float, float))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_ffF(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(float, float, double))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_fF(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(float, double))function->func_ptr)(m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f64);
  m->sp += -1;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_fFi(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(float, double, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_fFI(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(float, double, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_fFf(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(float, double, float))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_fFF(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(float, double, double))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_F(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(double))function->func_ptr)(m->stack[m->sp-0].value.f64);
  m->sp += 0;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_Fi(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(double, uint32_t))function->func_ptr)(m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint32);
  m->sp += -1;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_Fii(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(double, uint32_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_FiI(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(double, uint32_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_Fif(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(double, uint32_t, float))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_FiF(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(double, uint32_t, double))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_FI(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(double, uint64_t))function->func_ptr)(m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint64);
  m->sp += -1;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_FIi(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(double, uint64_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_FII(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(double, uint64_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_FIf(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(double, uint64_t, float))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_FIF(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(double, uint64_t, double))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_Ff(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(double, float))function->func_ptr)(m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f32);
  m->sp += -1;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_Ffi(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(double, float, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_FfI(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(double, float, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_Fff(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(double, float, float))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_FfF(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(double, float, double))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_FF(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(double, double))function->func_ptr)(m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f64);
  m->sp += -1;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_FFi(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(double, double, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_FFI(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(double, double, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_FFf(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(double, double, float))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_I_FFF(Module *m, Block *function, Type *type) {
  uint64_t res = ((uint64_t (*)(double, double, double))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = I64;
  m->stack[m->sp].value.uint64 = res;
}

void thunk_out_f_0(Module *m, Block *function, Type *type) {
  float res = ((float (*)())function->func_ptr)();
  m->sp += 1;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_i(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint32_t))function->func_ptr)(m->stack[m->sp-0].value.uint32);
  m->sp += 0;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_ii(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint32_t, uint32_t))function->func_ptr)(m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint32);
  m->sp += -1;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_iii(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint32_t, uint32_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_iiI(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint32_t, uint32_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_iif(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint32_t, uint32_t, float))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_iiF(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint32_t, uint32_t, double))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_iI(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint32_t, uint64_t))function->func_ptr)(m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint64);
  m->sp += -1;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_iIi(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint32_t, uint64_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_iII(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint32_t, uint64_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_iIf(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint32_t, uint64_t, float))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_iIF(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint32_t, uint64_t, double))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_if(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint32_t, float))function->func_ptr)(m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f32);
  m->sp += -1;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_ifi(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint32_t, float, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_ifI(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint32_t, float, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_iff(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint32_t, float, float))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_ifF(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint32_t, float, double))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_iF(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint32_t, double))function->func_ptr)(m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f64);
  m->sp += -1;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_iFi(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint32_t, double, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_iFI(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint32_t, double, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_iFf(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint32_t, double, float))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_iFF(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint32_t, double, double))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_I(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint64_t))function->func_ptr)(m->stack[m->sp-0].value.uint64);
  m->sp += 0;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_Ii(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint64_t, uint32_t))function->func_ptr)(m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint32);
  m->sp += -1;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_Iii(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint64_t, uint32_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_IiI(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint64_t, uint32_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_Iif(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint64_t, uint32_t, float))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_IiF(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint64_t, uint32_t, double))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_II(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint64_t, uint64_t))function->func_ptr)(m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint64);
  m->sp += -1;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_IIi(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint64_t, uint64_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_III(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint64_t, uint64_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_IIf(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint64_t, uint64_t, float))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_IIF(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint64_t, uint64_t, double))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_If(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint64_t, float))function->func_ptr)(m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f32);
  m->sp += -1;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_Ifi(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint64_t, float, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_IfI(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint64_t, float, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_Iff(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint64_t, float, float))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_IfF(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint64_t, float, double))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_IF(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint64_t, double))function->func_ptr)(m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f64);
  m->sp += -1;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_IFi(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint64_t, double, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_IFI(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint64_t, double, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_IFf(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint64_t, double, float))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_IFF(Module *m, Block *function, Type *type) {
  float res = ((float (*)(uint64_t, double, double))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_f(Module *m, Block *function, Type *type) {
  float res = ((float (*)(float))function->func_ptr)(m->stack[m->sp-0].value.f32);
  m->sp += 0;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_fi(Module *m, Block *function, Type *type) {
  float res = ((float (*)(float, uint32_t))function->func_ptr)(m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint32);
  m->sp += -1;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_fii(Module *m, Block *function, Type *type) {
  float res = ((float (*)(float, uint32_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_fiI(Module *m, Block *function, Type *type) {
  float res = ((float (*)(float, uint32_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_fif(Module *m, Block *function, Type *type) {
  float res = ((float (*)(float, uint32_t, float))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_fiF(Module *m, Block *function, Type *type) {
  float res = ((float (*)(float, uint32_t, double))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_fI(Module *m, Block *function, Type *type) {
  float res = ((float (*)(float, uint64_t))function->func_ptr)(m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint64);
  m->sp += -1;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_fIi(Module *m, Block *function, Type *type) {
  float res = ((float (*)(float, uint64_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_fII(Module *m, Block *function, Type *type) {
  float res = ((float (*)(float, uint64_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_fIf(Module *m, Block *function, Type *type) {
  float res = ((float (*)(float, uint64_t, float))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_fIF(Module *m, Block *function, Type *type) {
  float res = ((float (*)(float, uint64_t, double))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_ff(Module *m, Block *function, Type *type) {
  float res = ((float (*)(float, float))function->func_ptr)(m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f32);
  m->sp += -1;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_ffi(Module *m, Block *function, Type *type) {
  float res = ((float (*)(float, float, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_ffI(Module *m, Block *function, Type *type) {
  float res = ((float (*)(float, float, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_fff(Module *m, Block *function, Type *type) {
  float res = ((float (*)(float, float, float))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_ffF(Module *m, Block *function, Type *type) {
  float res = ((float (*)(float, float, double))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_fF(Module *m, Block *function, Type *type) {
  float res = ((float (*)(float, double))function->func_ptr)(m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f64);
  m->sp += -1;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_fFi(Module *m, Block *function, Type *type) {
  float res = ((float (*)(float, double, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_fFI(Module *m, Block *function, Type *type) {
  float res = ((float (*)(float, double, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_fFf(Module *m, Block *function, Type *type) {
  float res = ((float (*)(float, double, float))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_fFF(Module *m, Block *function, Type *type) {
  float res = ((float (*)(float, double, double))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_F(Module *m, Block *function, Type *type) {
  float res = ((float (*)(double))function->func_ptr)(m->stack[m->sp-0].value.f64);
  m->sp += 0;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_Fi(Module *m, Block *function, Type *type) {
  float res = ((float (*)(double, uint32_t))function->func_ptr)(m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint32);
  m->sp += -1;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_Fii(Module *m, Block *function, Type *type) {
  float res = ((float (*)(double, uint32_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_FiI(Module *m, Block *function, Type *type) {
  float res = ((float (*)(double, uint32_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_Fif(Module *m, Block *function, Type *type) {
  float res = ((float (*)(double, uint32_t, float))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_FiF(Module *m, Block *function, Type *type) {
  float res = ((float (*)(double, uint32_t, double))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_FI(Module *m, Block *function, Type *type) {
  float res = ((float (*)(double, uint64_t))function->func_ptr)(m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint64);
  m->sp += -1;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_FIi(Module *m, Block *function, Type *type) {
  float res = ((float (*)(double, uint64_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_FII(Module *m, Block *function, Type *type) {
  float res = ((float (*)(double, uint64_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_FIf(Module *m, Block *function, Type *type) {
  float res = ((float (*)(double, uint64_t, float))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_FIF(Module *m, Block *function, Type *type) {
  float res = ((float (*)(double, uint64_t, double))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_Ff(Module *m, Block *function, Type *type) {
  float res = ((float (*)(double, float))function->func_ptr)(m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f32);
  m->sp += -1;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_Ffi(Module *m, Block *function, Type *type) {
  float res = ((float (*)(double, float, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_FfI(Module *m, Block *function, Type *type) {
  float res = ((float (*)(double, float, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_Fff(Module *m, Block *function, Type *type) {
  float res = ((float (*)(double, float, float))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_FfF(Module *m, Block *function, Type *type) {
  float res = ((float (*)(double, float, double))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_FF(Module *m, Block *function, Type *type) {
  float res = ((float (*)(double, double))function->func_ptr)(m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f64);
  m->sp += -1;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_FFi(Module *m, Block *function, Type *type) {
  float res = ((float (*)(double, double, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_FFI(Module *m, Block *function, Type *type) {
  float res = ((float (*)(double, double, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_FFf(Module *m, Block *function, Type *type) {
  float res = ((float (*)(double, double, float))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_f_FFF(Module *m, Block *function, Type *type) {
  float res = ((float (*)(double, double, double))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F32;
  m->stack[m->sp].value.f32 = res;
}

void thunk_out_F_0(Module *m, Block *function, Type *type) {
  double res = ((double (*)())function->func_ptr)();
  m->sp += 1;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_i(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint32_t))function->func_ptr)(m->stack[m->sp-0].value.uint32);
  m->sp += 0;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_ii(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint32_t, uint32_t))function->func_ptr)(m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint32);
  m->sp += -1;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_iii(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint32_t, uint32_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_iiI(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint32_t, uint32_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_iif(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint32_t, uint32_t, float))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_iiF(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint32_t, uint32_t, double))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_iI(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint32_t, uint64_t))function->func_ptr)(m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint64);
  m->sp += -1;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_iIi(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint32_t, uint64_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_iII(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint32_t, uint64_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_iIf(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint32_t, uint64_t, float))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_iIF(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint32_t, uint64_t, double))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_if(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint32_t, float))function->func_ptr)(m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f32);
  m->sp += -1;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_ifi(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint32_t, float, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_ifI(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint32_t, float, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_iff(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint32_t, float, float))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_ifF(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint32_t, float, double))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_iF(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint32_t, double))function->func_ptr)(m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f64);
  m->sp += -1;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_iFi(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint32_t, double, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_iFI(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint32_t, double, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_iFf(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint32_t, double, float))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_iFF(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint32_t, double, double))function->func_ptr)(m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_I(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint64_t))function->func_ptr)(m->stack[m->sp-0].value.uint64);
  m->sp += 0;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_Ii(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint64_t, uint32_t))function->func_ptr)(m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint32);
  m->sp += -1;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_Iii(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint64_t, uint32_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_IiI(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint64_t, uint32_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_Iif(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint64_t, uint32_t, float))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_IiF(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint64_t, uint32_t, double))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_II(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint64_t, uint64_t))function->func_ptr)(m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint64);
  m->sp += -1;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_IIi(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint64_t, uint64_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_III(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint64_t, uint64_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_IIf(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint64_t, uint64_t, float))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_IIF(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint64_t, uint64_t, double))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_If(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint64_t, float))function->func_ptr)(m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f32);
  m->sp += -1;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_Ifi(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint64_t, float, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_IfI(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint64_t, float, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_Iff(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint64_t, float, float))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_IfF(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint64_t, float, double))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_IF(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint64_t, double))function->func_ptr)(m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f64);
  m->sp += -1;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_IFi(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint64_t, double, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_IFI(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint64_t, double, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_IFf(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint64_t, double, float))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_IFF(Module *m, Block *function, Type *type) {
  double res = ((double (*)(uint64_t, double, double))function->func_ptr)(m->stack[m->sp-2].value.uint64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_f(Module *m, Block *function, Type *type) {
  double res = ((double (*)(float))function->func_ptr)(m->stack[m->sp-0].value.f32);
  m->sp += 0;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_fi(Module *m, Block *function, Type *type) {
  double res = ((double (*)(float, uint32_t))function->func_ptr)(m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint32);
  m->sp += -1;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_fii(Module *m, Block *function, Type *type) {
  double res = ((double (*)(float, uint32_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_fiI(Module *m, Block *function, Type *type) {
  double res = ((double (*)(float, uint32_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_fif(Module *m, Block *function, Type *type) {
  double res = ((double (*)(float, uint32_t, float))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_fiF(Module *m, Block *function, Type *type) {
  double res = ((double (*)(float, uint32_t, double))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_fI(Module *m, Block *function, Type *type) {
  double res = ((double (*)(float, uint64_t))function->func_ptr)(m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint64);
  m->sp += -1;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_fIi(Module *m, Block *function, Type *type) {
  double res = ((double (*)(float, uint64_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_fII(Module *m, Block *function, Type *type) {
  double res = ((double (*)(float, uint64_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_fIf(Module *m, Block *function, Type *type) {
  double res = ((double (*)(float, uint64_t, float))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_fIF(Module *m, Block *function, Type *type) {
  double res = ((double (*)(float, uint64_t, double))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_ff(Module *m, Block *function, Type *type) {
  double res = ((double (*)(float, float))function->func_ptr)(m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f32);
  m->sp += -1;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_ffi(Module *m, Block *function, Type *type) {
  double res = ((double (*)(float, float, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_ffI(Module *m, Block *function, Type *type) {
  double res = ((double (*)(float, float, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_fff(Module *m, Block *function, Type *type) {
  double res = ((double (*)(float, float, float))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_ffF(Module *m, Block *function, Type *type) {
  double res = ((double (*)(float, float, double))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_fF(Module *m, Block *function, Type *type) {
  double res = ((double (*)(float, double))function->func_ptr)(m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f64);
  m->sp += -1;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_fFi(Module *m, Block *function, Type *type) {
  double res = ((double (*)(float, double, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_fFI(Module *m, Block *function, Type *type) {
  double res = ((double (*)(float, double, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_fFf(Module *m, Block *function, Type *type) {
  double res = ((double (*)(float, double, float))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_fFF(Module *m, Block *function, Type *type) {
  double res = ((double (*)(float, double, double))function->func_ptr)(m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_F(Module *m, Block *function, Type *type) {
  double res = ((double (*)(double))function->func_ptr)(m->stack[m->sp-0].value.f64);
  m->sp += 0;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_Fi(Module *m, Block *function, Type *type) {
  double res = ((double (*)(double, uint32_t))function->func_ptr)(m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint32);
  m->sp += -1;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_Fii(Module *m, Block *function, Type *type) {
  double res = ((double (*)(double, uint32_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_FiI(Module *m, Block *function, Type *type) {
  double res = ((double (*)(double, uint32_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_Fif(Module *m, Block *function, Type *type) {
  double res = ((double (*)(double, uint32_t, float))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_FiF(Module *m, Block *function, Type *type) {
  double res = ((double (*)(double, uint32_t, double))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_FI(Module *m, Block *function, Type *type) {
  double res = ((double (*)(double, uint64_t))function->func_ptr)(m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint64);
  m->sp += -1;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_FIi(Module *m, Block *function, Type *type) {
  double res = ((double (*)(double, uint64_t, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_FII(Module *m, Block *function, Type *type) {
  double res = ((double (*)(double, uint64_t, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_FIf(Module *m, Block *function, Type *type) {
  double res = ((double (*)(double, uint64_t, float))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_FIF(Module *m, Block *function, Type *type) {
  double res = ((double (*)(double, uint64_t, double))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.uint64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_Ff(Module *m, Block *function, Type *type) {
  double res = ((double (*)(double, float))function->func_ptr)(m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f32);
  m->sp += -1;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_Ffi(Module *m, Block *function, Type *type) {
  double res = ((double (*)(double, float, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_FfI(Module *m, Block *function, Type *type) {
  double res = ((double (*)(double, float, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_Fff(Module *m, Block *function, Type *type) {
  double res = ((double (*)(double, float, float))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_FfF(Module *m, Block *function, Type *type) {
  double res = ((double (*)(double, float, double))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_FF(Module *m, Block *function, Type *type) {
  double res = ((double (*)(double, double))function->func_ptr)(m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f64);
  m->sp += -1;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_FFi(Module *m, Block *function, Type *type) {
  double res = ((double (*)(double, double, uint32_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_FFI(Module *m, Block *function, Type *type) {
  double res = ((double (*)(double, double, uint64_t))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.uint64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_FFf(Module *m, Block *function, Type *type) {
  double res = ((double (*)(double, double, float))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f32);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}

void thunk_out_F_FFF(Module *m, Block *function, Type *type) {
  double res = ((double (*)(double, double, double))function->func_ptr)(m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f64);
  m->sp += -2;
  m->stack[m->sp].value_type = F64;
  m->stack[m->sp].value.f64 = res;
}



void thunk_out_0_iiii(Module *m, Block *function, Type *type) {
  ((void (*)(uint32_t, uint32_t, uint32_t, uint32_t))function->func_ptr)(m->stack[m->sp-3].value.uint32, m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint32);
  m->sp = m->sp + -4;
}

void thunk_out_i_iiii(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint32_t, uint32_t, uint32_t, uint32_t))function->func_ptr)(m->stack[m->sp-3].value.uint32, m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint32);
  m->sp += -3;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_i_iiiii(Module *m, Block *function, Type *type) {
  uint32_t res = ((uint32_t (*)(uint32_t, uint32_t, uint32_t, uint32_t, uint32_t))function->func_ptr)(m->stack[m->sp-4].value.uint32, m->stack[m->sp-3].value.uint32, m->stack[m->sp-2].value.uint32, m->stack[m->sp-1].value.uint32, m->stack[m->sp-0].value.uint32);
  m->sp += -4;
  m->stack[m->sp].value_type = I32;
  m->stack[m->sp].value.uint32 = res;
}

void thunk_out_0_ffff(Module *m, Block *function, Type *type) {
  ((void (*)(float, float, float, float))function->func_ptr)(m->stack[m->sp-3].value.f32, m->stack[m->sp-2].value.f32, m->stack[m->sp-1].value.f32, m->stack[m->sp-0].value.f32);
  m->sp = m->sp + -4;
}

void thunk_out_0_FFFFFF(Module *m, Block *function, Type *type) {
  ((void (*)(double, double, double, double, double, double))function->func_ptr)(m->stack[m->sp-5].value.f64, m->stack[m->sp-4].value.f64, m->stack[m->sp-3].value.f64, m->stack[m->sp-2].value.f64, m->stack[m->sp-1].value.f64, m->stack[m->sp-0].value.f64);
  m->sp = m->sp + -6;
}



void thunk_in_0_0() {
  Module *m = _wa_current_module_;
  ;
  interpret(m);
}

void thunk_in_0_i(uint32_t a0) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  interpret(m);
}

void thunk_in_0_ii(uint32_t a0, uint32_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  interpret(m);
}

void thunk_in_0_iii(uint32_t a0, uint32_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
}

void thunk_in_0_iiI(uint32_t a0, uint32_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
}

void thunk_in_0_iif(uint32_t a0, uint32_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
}

void thunk_in_0_iiF(uint32_t a0, uint32_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
}

void thunk_in_0_iI(uint32_t a0, uint64_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  interpret(m);
}

void thunk_in_0_iIi(uint32_t a0, uint64_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
}

void thunk_in_0_iII(uint32_t a0, uint64_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
}

void thunk_in_0_iIf(uint32_t a0, uint64_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
}

void thunk_in_0_iIF(uint32_t a0, uint64_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
}

void thunk_in_0_if(uint32_t a0, float a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  interpret(m);
}

void thunk_in_0_ifi(uint32_t a0, float a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
}

void thunk_in_0_ifI(uint32_t a0, float a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
}

void thunk_in_0_iff(uint32_t a0, float a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
}

void thunk_in_0_ifF(uint32_t a0, float a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
}

void thunk_in_0_iF(uint32_t a0, double a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  interpret(m);
}

void thunk_in_0_iFi(uint32_t a0, double a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
}

void thunk_in_0_iFI(uint32_t a0, double a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
}

void thunk_in_0_iFf(uint32_t a0, double a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
}

void thunk_in_0_iFF(uint32_t a0, double a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
}

void thunk_in_0_I(uint64_t a0) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  interpret(m);
}

void thunk_in_0_Ii(uint64_t a0, uint32_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  interpret(m);
}

void thunk_in_0_Iii(uint64_t a0, uint32_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
}

void thunk_in_0_IiI(uint64_t a0, uint32_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
}

void thunk_in_0_Iif(uint64_t a0, uint32_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
}

void thunk_in_0_IiF(uint64_t a0, uint32_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
}

void thunk_in_0_II(uint64_t a0, uint64_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  interpret(m);
}

void thunk_in_0_IIi(uint64_t a0, uint64_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
}

void thunk_in_0_III(uint64_t a0, uint64_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
}

void thunk_in_0_IIf(uint64_t a0, uint64_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
}

void thunk_in_0_IIF(uint64_t a0, uint64_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
}

void thunk_in_0_If(uint64_t a0, float a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  interpret(m);
}

void thunk_in_0_Ifi(uint64_t a0, float a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
}

void thunk_in_0_IfI(uint64_t a0, float a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
}

void thunk_in_0_Iff(uint64_t a0, float a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
}

void thunk_in_0_IfF(uint64_t a0, float a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
}

void thunk_in_0_IF(uint64_t a0, double a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  interpret(m);
}

void thunk_in_0_IFi(uint64_t a0, double a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
}

void thunk_in_0_IFI(uint64_t a0, double a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
}

void thunk_in_0_IFf(uint64_t a0, double a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
}

void thunk_in_0_IFF(uint64_t a0, double a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
}

void thunk_in_0_f(float a0) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  interpret(m);
}

void thunk_in_0_fi(float a0, uint32_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  interpret(m);
}

void thunk_in_0_fii(float a0, uint32_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
}

void thunk_in_0_fiI(float a0, uint32_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
}

void thunk_in_0_fif(float a0, uint32_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
}

void thunk_in_0_fiF(float a0, uint32_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
}

void thunk_in_0_fI(float a0, uint64_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  interpret(m);
}

void thunk_in_0_fIi(float a0, uint64_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
}

void thunk_in_0_fII(float a0, uint64_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
}

void thunk_in_0_fIf(float a0, uint64_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
}

void thunk_in_0_fIF(float a0, uint64_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
}

void thunk_in_0_ff(float a0, float a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  interpret(m);
}

void thunk_in_0_ffi(float a0, float a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
}

void thunk_in_0_ffI(float a0, float a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
}

void thunk_in_0_fff(float a0, float a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
}

void thunk_in_0_ffF(float a0, float a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
}

void thunk_in_0_fF(float a0, double a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  interpret(m);
}

void thunk_in_0_fFi(float a0, double a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
}

void thunk_in_0_fFI(float a0, double a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
}

void thunk_in_0_fFf(float a0, double a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
}

void thunk_in_0_fFF(float a0, double a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
}

void thunk_in_0_F(double a0) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  interpret(m);
}

void thunk_in_0_Fi(double a0, uint32_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  interpret(m);
}

void thunk_in_0_Fii(double a0, uint32_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
}

void thunk_in_0_FiI(double a0, uint32_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
}

void thunk_in_0_Fif(double a0, uint32_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
}

void thunk_in_0_FiF(double a0, uint32_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
}

void thunk_in_0_FI(double a0, uint64_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  interpret(m);
}

void thunk_in_0_FIi(double a0, uint64_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
}

void thunk_in_0_FII(double a0, uint64_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
}

void thunk_in_0_FIf(double a0, uint64_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
}

void thunk_in_0_FIF(double a0, uint64_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
}

void thunk_in_0_Ff(double a0, float a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  interpret(m);
}

void thunk_in_0_Ffi(double a0, float a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
}

void thunk_in_0_FfI(double a0, float a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
}

void thunk_in_0_Fff(double a0, float a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
}

void thunk_in_0_FfF(double a0, float a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
}

void thunk_in_0_FF(double a0, double a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  interpret(m);
}

void thunk_in_0_FFi(double a0, double a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
}

void thunk_in_0_FFI(double a0, double a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
}

void thunk_in_0_FFf(double a0, double a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
}

void thunk_in_0_FFF(double a0, double a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
}

uint32_t thunk_in_i_0() {
  Module *m = _wa_current_module_;
  ;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_i(uint32_t a0) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_ii(uint32_t a0, uint32_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_iii(uint32_t a0, uint32_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_iiI(uint32_t a0, uint32_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_iif(uint32_t a0, uint32_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_iiF(uint32_t a0, uint32_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_iI(uint32_t a0, uint64_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_iIi(uint32_t a0, uint64_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_iII(uint32_t a0, uint64_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_iIf(uint32_t a0, uint64_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_iIF(uint32_t a0, uint64_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_if(uint32_t a0, float a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_ifi(uint32_t a0, float a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_ifI(uint32_t a0, float a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_iff(uint32_t a0, float a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_ifF(uint32_t a0, float a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_iF(uint32_t a0, double a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_iFi(uint32_t a0, double a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_iFI(uint32_t a0, double a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_iFf(uint32_t a0, double a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_iFF(uint32_t a0, double a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_I(uint64_t a0) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_Ii(uint64_t a0, uint32_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_Iii(uint64_t a0, uint32_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_IiI(uint64_t a0, uint32_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_Iif(uint64_t a0, uint32_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_IiF(uint64_t a0, uint32_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_II(uint64_t a0, uint64_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_IIi(uint64_t a0, uint64_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_III(uint64_t a0, uint64_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_IIf(uint64_t a0, uint64_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_IIF(uint64_t a0, uint64_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_If(uint64_t a0, float a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_Ifi(uint64_t a0, float a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_IfI(uint64_t a0, float a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_Iff(uint64_t a0, float a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_IfF(uint64_t a0, float a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_IF(uint64_t a0, double a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_IFi(uint64_t a0, double a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_IFI(uint64_t a0, double a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_IFf(uint64_t a0, double a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_IFF(uint64_t a0, double a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_f(float a0) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_fi(float a0, uint32_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_fii(float a0, uint32_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_fiI(float a0, uint32_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_fif(float a0, uint32_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_fiF(float a0, uint32_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_fI(float a0, uint64_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_fIi(float a0, uint64_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_fII(float a0, uint64_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_fIf(float a0, uint64_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_fIF(float a0, uint64_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_ff(float a0, float a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_ffi(float a0, float a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_ffI(float a0, float a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_fff(float a0, float a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_ffF(float a0, float a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_fF(float a0, double a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_fFi(float a0, double a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_fFI(float a0, double a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_fFf(float a0, double a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_fFF(float a0, double a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_F(double a0) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_Fi(double a0, uint32_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_Fii(double a0, uint32_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_FiI(double a0, uint32_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_Fif(double a0, uint32_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_FiF(double a0, uint32_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_FI(double a0, uint64_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_FIi(double a0, uint64_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_FII(double a0, uint64_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_FIf(double a0, uint64_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_FIF(double a0, uint64_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_Ff(double a0, float a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_Ffi(double a0, float a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_FfI(double a0, float a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_Fff(double a0, float a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_FfF(double a0, float a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_FF(double a0, double a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_FFi(double a0, double a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_FFI(double a0, double a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_FFf(double a0, double a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint32_t thunk_in_i_FFF(double a0, double a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint32;
}

uint64_t thunk_in_I_0() {
  Module *m = _wa_current_module_;
  ;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_i(uint32_t a0) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_ii(uint32_t a0, uint32_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_iii(uint32_t a0, uint32_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_iiI(uint32_t a0, uint32_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_iif(uint32_t a0, uint32_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_iiF(uint32_t a0, uint32_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_iI(uint32_t a0, uint64_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_iIi(uint32_t a0, uint64_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_iII(uint32_t a0, uint64_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_iIf(uint32_t a0, uint64_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_iIF(uint32_t a0, uint64_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_if(uint32_t a0, float a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_ifi(uint32_t a0, float a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_ifI(uint32_t a0, float a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_iff(uint32_t a0, float a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_ifF(uint32_t a0, float a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_iF(uint32_t a0, double a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_iFi(uint32_t a0, double a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_iFI(uint32_t a0, double a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_iFf(uint32_t a0, double a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_iFF(uint32_t a0, double a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_I(uint64_t a0) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_Ii(uint64_t a0, uint32_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_Iii(uint64_t a0, uint32_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_IiI(uint64_t a0, uint32_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_Iif(uint64_t a0, uint32_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_IiF(uint64_t a0, uint32_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_II(uint64_t a0, uint64_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_IIi(uint64_t a0, uint64_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_III(uint64_t a0, uint64_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_IIf(uint64_t a0, uint64_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_IIF(uint64_t a0, uint64_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_If(uint64_t a0, float a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_Ifi(uint64_t a0, float a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_IfI(uint64_t a0, float a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_Iff(uint64_t a0, float a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_IfF(uint64_t a0, float a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_IF(uint64_t a0, double a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_IFi(uint64_t a0, double a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_IFI(uint64_t a0, double a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_IFf(uint64_t a0, double a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_IFF(uint64_t a0, double a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_f(float a0) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_fi(float a0, uint32_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_fii(float a0, uint32_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_fiI(float a0, uint32_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_fif(float a0, uint32_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_fiF(float a0, uint32_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_fI(float a0, uint64_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_fIi(float a0, uint64_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_fII(float a0, uint64_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_fIf(float a0, uint64_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_fIF(float a0, uint64_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_ff(float a0, float a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_ffi(float a0, float a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_ffI(float a0, float a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_fff(float a0, float a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_ffF(float a0, float a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_fF(float a0, double a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_fFi(float a0, double a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_fFI(float a0, double a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_fFf(float a0, double a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_fFF(float a0, double a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_F(double a0) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_Fi(double a0, uint32_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_Fii(double a0, uint32_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_FiI(double a0, uint32_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_Fif(double a0, uint32_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_FiF(double a0, uint32_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_FI(double a0, uint64_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_FIi(double a0, uint64_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_FII(double a0, uint64_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_FIf(double a0, uint64_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_FIF(double a0, uint64_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_Ff(double a0, float a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_Ffi(double a0, float a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_FfI(double a0, float a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_Fff(double a0, float a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_FfF(double a0, float a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_FF(double a0, double a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_FFi(double a0, double a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_FFI(double a0, double a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_FFf(double a0, double a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

uint64_t thunk_in_I_FFF(double a0, double a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.uint64;
}

float thunk_in_f_0() {
  Module *m = _wa_current_module_;
  ;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_i(uint32_t a0) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_ii(uint32_t a0, uint32_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_iii(uint32_t a0, uint32_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_iiI(uint32_t a0, uint32_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_iif(uint32_t a0, uint32_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_iiF(uint32_t a0, uint32_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_iI(uint32_t a0, uint64_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_iIi(uint32_t a0, uint64_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_iII(uint32_t a0, uint64_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_iIf(uint32_t a0, uint64_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_iIF(uint32_t a0, uint64_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_if(uint32_t a0, float a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_ifi(uint32_t a0, float a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_ifI(uint32_t a0, float a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_iff(uint32_t a0, float a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_ifF(uint32_t a0, float a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_iF(uint32_t a0, double a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_iFi(uint32_t a0, double a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_iFI(uint32_t a0, double a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_iFf(uint32_t a0, double a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_iFF(uint32_t a0, double a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_I(uint64_t a0) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_Ii(uint64_t a0, uint32_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_Iii(uint64_t a0, uint32_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_IiI(uint64_t a0, uint32_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_Iif(uint64_t a0, uint32_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_IiF(uint64_t a0, uint32_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_II(uint64_t a0, uint64_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_IIi(uint64_t a0, uint64_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_III(uint64_t a0, uint64_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_IIf(uint64_t a0, uint64_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_IIF(uint64_t a0, uint64_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_If(uint64_t a0, float a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_Ifi(uint64_t a0, float a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_IfI(uint64_t a0, float a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_Iff(uint64_t a0, float a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_IfF(uint64_t a0, float a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_IF(uint64_t a0, double a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_IFi(uint64_t a0, double a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_IFI(uint64_t a0, double a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_IFf(uint64_t a0, double a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_IFF(uint64_t a0, double a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_f(float a0) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_fi(float a0, uint32_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_fii(float a0, uint32_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_fiI(float a0, uint32_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_fif(float a0, uint32_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_fiF(float a0, uint32_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_fI(float a0, uint64_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_fIi(float a0, uint64_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_fII(float a0, uint64_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_fIf(float a0, uint64_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_fIF(float a0, uint64_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_ff(float a0, float a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_ffi(float a0, float a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_ffI(float a0, float a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_fff(float a0, float a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_ffF(float a0, float a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_fF(float a0, double a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_fFi(float a0, double a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_fFI(float a0, double a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_fFf(float a0, double a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_fFF(float a0, double a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_F(double a0) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_Fi(double a0, uint32_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_Fii(double a0, uint32_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_FiI(double a0, uint32_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_Fif(double a0, uint32_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_FiF(double a0, uint32_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_FI(double a0, uint64_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_FIi(double a0, uint64_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_FII(double a0, uint64_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_FIf(double a0, uint64_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_FIF(double a0, uint64_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_Ff(double a0, float a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_Ffi(double a0, float a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_FfI(double a0, float a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_Fff(double a0, float a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_FfF(double a0, float a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_FF(double a0, double a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_FFi(double a0, double a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_FFI(double a0, double a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_FFf(double a0, double a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

float thunk_in_f_FFF(double a0, double a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f32;
}

double thunk_in_F_0() {
  Module *m = _wa_current_module_;
  ;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_i(uint32_t a0) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_ii(uint32_t a0, uint32_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_iii(uint32_t a0, uint32_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_iiI(uint32_t a0, uint32_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_iif(uint32_t a0, uint32_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_iiF(uint32_t a0, uint32_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_iI(uint32_t a0, uint64_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_iIi(uint32_t a0, uint64_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_iII(uint32_t a0, uint64_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_iIf(uint32_t a0, uint64_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_iIF(uint32_t a0, uint64_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_if(uint32_t a0, float a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_ifi(uint32_t a0, float a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_ifI(uint32_t a0, float a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_iff(uint32_t a0, float a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_ifF(uint32_t a0, float a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_iF(uint32_t a0, double a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_iFi(uint32_t a0, double a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_iFI(uint32_t a0, double a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_iFf(uint32_t a0, double a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_iFF(uint32_t a0, double a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_I(uint64_t a0) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_Ii(uint64_t a0, uint32_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_Iii(uint64_t a0, uint32_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_IiI(uint64_t a0, uint32_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_Iif(uint64_t a0, uint32_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_IiF(uint64_t a0, uint32_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_II(uint64_t a0, uint64_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_IIi(uint64_t a0, uint64_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_III(uint64_t a0, uint64_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_IIf(uint64_t a0, uint64_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_IIF(uint64_t a0, uint64_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_If(uint64_t a0, float a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_Ifi(uint64_t a0, float a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_IfI(uint64_t a0, float a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_Iff(uint64_t a0, float a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_IfF(uint64_t a0, float a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_IF(uint64_t a0, double a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_IFi(uint64_t a0, double a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_IFI(uint64_t a0, double a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_IFf(uint64_t a0, double a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_IFF(uint64_t a0, double a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.uint64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_f(float a0) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_fi(float a0, uint32_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_fii(float a0, uint32_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_fiI(float a0, uint32_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_fif(float a0, uint32_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_fiF(float a0, uint32_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_fI(float a0, uint64_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_fIi(float a0, uint64_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_fII(float a0, uint64_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_fIf(float a0, uint64_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_fIF(float a0, uint64_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_ff(float a0, float a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_ffi(float a0, float a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_ffI(float a0, float a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_fff(float a0, float a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_ffF(float a0, float a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_fF(float a0, double a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_fFi(float a0, double a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_fFI(float a0, double a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_fFf(float a0, double a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_fFF(float a0, double a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f32 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_F(double a0) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_Fi(double a0, uint32_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_Fii(double a0, uint32_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_FiI(double a0, uint32_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_Fif(double a0, uint32_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_FiF(double a0, uint32_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_FI(double a0, uint64_t a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_FIi(double a0, uint64_t a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_FII(double a0, uint64_t a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_FIf(double a0, uint64_t a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_FIF(double a0, uint64_t a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.uint64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_Ff(double a0, float a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_Ffi(double a0, float a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_FfI(double a0, float a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_Fff(double a0, float a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_FfF(double a0, float a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f32 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_FF(double a0, double a1) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_FFi(double a0, double a1, uint32_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_FFI(double a0, double a1, uint64_t a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.uint64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_FFf(double a0, double a1, float a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f32 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

double thunk_in_F_FFF(double a0, double a1, double a2) {
  Module *m = _wa_current_module_;
  m->stack[m->fp+0].value.f64 = a0;
  m->stack[m->fp+1].value.f64 = a1;
  m->stack[m->fp+2].value.f64 = a2;
  interpret(m);
  return m->stack[m->sp--].value.f64;
}

